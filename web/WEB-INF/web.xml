<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
         version="4.0">


    <!--
    Get请求中文参数乱码的话有两种解决方法:
    第一。 修改tomcat配置文件server.xml、加入红色部分
     <Connector URIEncoding="utf-8" ort="8080" protocol="HTTP/1.1"
        connectionTimeout="20000" redirectPort="8443" />
    第二。对参数进行重新编码:
    String user = new String(request.getParamter("user").getBytes("ISO8859-1"), "utf-8")
    tomcat默认编码是ISO8859-1。需要将其按utf-8编码 。
    -->
    <!--配置解决中文乱码的过滤器
    放置顺序也很重要，放到ContextLoaderListener监听器的前面放，到前面-->
    <!-- 配置 springMVC 编码过滤器 -->
    <filter>
        <filter-name>characterEncodingFilter</filter-name>
        <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
        <!-- 设置过滤器中的属性值 -->
        <init-param>
            <param-name>encoding</param-name>
            <param-value>UTF-8</param-value>
        </init-param>
        <!-- 启动过滤器 -->
        <init-param>
            <param-name>forceEncoding</param-name>
            <param-value>true</param-value>
        </init-param>
    </filter>
    <!-- 过滤所有请求 -->
    <filter-mapping>
        <filter-name>characterEncodingFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>



    <!--
       配置org.springframework.web.filter.HiddenHttpMethodFilter
       可以把POST请求转换为PUT 和 DELETE 请求
   -->
    <filter>
        <filter-name>HiddenHttpMethodFilter</filter-name>
        <filter-class>org.springframework.web.filter.HiddenHttpMethodFilter</filter-class>
    </filter>
    <filter-mapping>
        <filter-name>HiddenHttpMethodFilter</filter-name>
        <!--拦截所有请求-->
        <url-pattern>/*</url-pattern>
        <servlet-name>springDispatcherServlet</servlet-name>
    </filter-mapping>


    <!--
        解决 ： JSPs only permit GET POST or HEAD问题
        自定义一个过滤器然后配置
    -->
    <filter>
        <filter-name>MyFilter</filter-name>
        <filter-class>com.springmvc.filters.MyHttpMethodFilter</filter-class>
    </filter>
    <filter-mapping>
        <filter-name>MyFilter</filter-name>
        <url-pattern>/*</url-pattern>
        <!--必须为FORWARD-->
        <dispatcher>FORWARD</dispatcher>
    </filter-mapping>


    <!--配置DispatcherServlet-->
    <servlet>
        <servlet-name>springDispatcherServlet</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <!--配置DispatcherServlet 的一个初始化参数：配置SpringMVC配置文件的位置和名称-->
        <!--
            实际上也可以不通过contextConfigLocation 来配置SpringMVC的配置文件，而使用默认的配置文件为：
                /WEB-INF/<servlet-name>-servlet.xml
        -->
        <init-param>
            <param-name>contextConfigLocation</param-name>
            <param-value>classpath:springmvc.xml</param-value>
        </init-param>
        <load-on-startup>1</load-on-startup>
    </servlet>
    <servlet-mapping>
        <servlet-name>springDispatcherServlet</servlet-name>
        <!--应答所有请求-->
        <url-pattern>/</url-pattern>
    </servlet-mapping>

    <!--配置启动Spring IOC容器的Listener-->
    <context-param>
        <param-name>contextConfigLocation</param-name>
        <param-value>classpath:applicationContext.xml</param-value>
    </context-param>
    <listener>
        <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
    </listener>
</web-app>