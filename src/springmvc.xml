<?xml version="1.0" encoding="UTF-8"?><beans xmlns="http://www.springframework.org/schema/beans"       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"       xmlns:p="http://www.springframework.org/schema/p"       xmlns:util="http://www.springframework.org/schema/util"       xmlns:context="http://www.springframework.org/schema/context"       xmlns:aop="http://www.springframework.org/schema/aop"       xmlns:tx="http://www.springframework.org/schema/tx"       xmlns:mvc="http://www.springframework.org/schema/mvc"       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd                           http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd                           http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd                           http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd                           http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd                           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">    <!--实际开发中annotation-driven标签    如果配置了default-servlet-handler或view-controller则    需要配置annotation-driven    类型转换器：conversion-service="conversionServiceFactoryBean"    -->    <mvc:annotation-driven conversion-service="conversionService"/>    <!--配置自定义的类型转换器到SpringMVC中    FormattingConversionServiceFactoryBean 可以使用注解    -->    <bean id="conversionService" class="org.springframework.format.support.FormattingConversionServiceFactoryBean">        <property name="converters">            <set>                <ref bean="employeeConverter"/>            </set>        </property>    </bean>    <!--处理静态资源--><!--    <mvc:default-servlet-handler/>-->    <mvc:resources mapping="/resources/**" location="/resources/" />    <!--开启组件扫描 include扫描需要放在上面-->    <context:component-scan base-package="com.springmvc">        <!--解决两个IOC容器都进行创建的问题-->        <context:include-filter type="annotation" expression="org.springframework.stereotype.Controller"/>        <context:include-filter type="annotation" expression="org.springframework.web.bind.annotation.ControllerAdvice"/>        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Service"/>    </context:component-scan>    <!--        配置视图解析器：如何把handler方法返回值解析为实际的物理视图    -->    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">        <!--前缀-->        <property name="prefix" value="/views/hello/"></property>        <!--后缀-->        <property name="suffix" value=".jsp"></property>    </bean>    <!--配置视图解析器BeanNameViewResolver 解析器：使用视图的名字来解析视图-->    <!--通过order 属性来定义视图解析器的优先级，order值越小优先级越高-->    <bean class="org.springframework.web.servlet.view.BeanNameViewResolver">        <property name="order" value="100"/>    </bean>    <!--配置国际化资源文件    不需要了，下方以配置    --><!--    <bean id="messaeSource" class="org.springframework.context.support.ResourceBundleMessageSource">--><!--        <property name="basename" value="i18n"/>--><!--    </bean>-->    <!--配置直接转发的页面-->    <!--可以直接响应转发的页面，而无需经过handler的方法-->    <mvc:view-controller path="/nowgo" view-name="hello"/>    <!--i18n 直接应答-->    <mvc:view-controller path="/i18n" view-name="forward:/views/i18n/i18n.jsp"/>    <mvc:view-controller path="/i18n2" view-name="forward:/views/i18n/i18n2.jsp"/>    <!-- 存储区域设置信息 SessionLocaleResolver类通过一个预定义会话名将区域化信息存储在会话中 从session判断用户语言defaultLocale            :默认语言 -->    <bean id="localeResolver"          class="org.springframework.web.servlet.i18n.SessionLocaleResolver">        <property name="defaultLocale" value="zh_CN" />    </bean>    <!-- 国际化资源文件 messageSource配置的是国际化资源文件的路径， classpath:messages指的是classpath路径下的        messages_zh_CN.properties文件和messages_en_US.properties文件 设置“useCodeAsDefaultMessage”，默认为false，这样当Spring在ResourceBundle中找不到messageKey的话，就抛出NoSuchMessageException，        把它设置为True，则找不到不会抛出异常，而是使用messageKey作为返回值。 -->    <bean id="messageSource"          class="org.springframework.context.support.ReloadableResourceBundleMessageSource">        <property name="defaultEncoding" value="UTF-8" />        <property name="useCodeAsDefaultMessage" value="true" />        <property name="basenames">            <list>                <value>classpath:i18n</value>            </list>        </property>    </bean>    <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">        <property name="defaultEncoding" value="UTF-8"/>        <property name="maxUploadSize" value="102400"/>    </bean>    <!--配置文件上传        MultipartResolver    -->    <mvc:interceptors>        <!--自定义的拦截器-->        <mvc:interceptor>            <!--配置那个请求不使用该拦截器 exclude-->            <!--<mvc:exclude-mapping path="/emps"/>-->            <!--配置那个请求使用该拦截器-->            <mvc:mapping path="/emps"/>            <bean id="secondInterceptor" class="com.springmvc.interceptor.SecondInterceptor"/>        </mvc:interceptor>        <bean id="myInterceptor" class="com.springmvc.interceptor.MyInterceptor"></bean>        <!--该拦截器通过名为”lang”的参数来拦截HTTP请求，使其重新设置页面的区域化信息 -->        <bean id="localeChangeInterceptor"              class="org.springframework.web.servlet.i18n.LocaleChangeInterceptor">            <property name="paramName" value="lang" />        </bean>    </mvc:interceptors>    <!--配置简单映射解析异常-->    <bean class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">        <property name="exceptionAttribute" value="exception"/>        <property name="exceptionMappings">            <props>                <prop key="java.lang.ArrayIndexOutOfBoundsException">forward:/views/errors/error.jsp</prop>            </props>        </property>    </bean></beans>